import ENUMS from 'irene/enums';
import Component from '@ember/component';
import { computed } from '@ember/object';
import ENV from 'irene/config/environment';
import { inject as service } from '@ember/service';

import { translationMacro as t } from 'ember-i18n';

export default Component.extend({
  isSavingStatus: false,

  i18n: service(),
  ajax: service(),
  notify: service('notification-messages-service'),

  tSavedPreferences: t("savedPreferences"),

  risks: computed(function() {
    const risks = ENUMS.RISK.CHOICES;
    const riskFilter = [ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN];
    return risks.filter(risk => !riskFilter.includes(risk.value));
  }),

  vulnerabilityDetails: computed(function() {
    return this.store.find('vulnerability', this.get("vulnerability.id"));
  }),

  riskOverridden: computed("vulnerability.riskOverridden", function() {
    const riskOverridden = this.get("vulnerability.riskOverridden");
    return riskOverridden;
  }),

  setProperties(data,type) {
    if(type === "mark") {
      this.set("vulnerability.risk", data.risk);
      this.set("vulnerability.riskOverridden", true);
      this.set("riskOverridden", true);
      this.set("isSavingStatus", false);
    }
    else {
      this.set("resettingMarkedAnalysis", false);
      this.set("editMarkedAnalysis", false);
      this.set("riskOverridden", false);
      this.set("vulnerability.risk", data.risk);
    }
  },

  saveVulnerabilityPreferences(data, type) {
    const profileId = this.get("project.activeProfileId");
    const vulnerabilityId = this.get("vulnerability.id");
    const tSavedPreferences = this.tSavedPreferences;
    const url = [ENV.endpoints.profiles, profileId, ENV.endpoints.vulnerabilityPreferences, vulnerabilityId].join('/');
    this.ajax.put(url, {
      data
    }).then(() => {
      if(!this.isDestroyed) {
        this.notify.success(tSavedPreferences);
        this.setProperties(data,type);
      }
    }, (error) => {
      this.setProperties(data,type);
      this.notify.error(error.payload.message);
    });
  },

  actions: {
    selectMarkedAnalyis() {
      const markedRisk = parseInt(this.$('#marked-analysis-project')[0].value);
      const data = {
        risk: markedRisk
      };
      const type = "mark";
      this.set("isSavingStatus", true);
      this.saveVulnerabilityPreferences(data, type);
    },
    editMarkedAnalysis() {
      this.set("riskOverridden", false);
      this.set("editMarkedAnalysis", true);
    },
    cancelEditMarking() {
      this.set("editMarkedAnalysis", false);
      if(this.get("vulnerability.riskOverridden")){
        this.set("riskOverridden", true);
      }
    },
    resetMarkedAnalysis() {
      const data = {
        risk: null
      };
      const type = "reset";
      this.set("resettingMarkedAnalysis", true);
      this.saveVulnerabilityPreferences(data, type);
    }
  }
});
